---
// Import the required functions
import { and, desc, eq, isNotNull, sql } from "drizzle-orm";
import db from "../../db";
import MainLayout from "../../layouts/MainLayout.astro";
import { cardsProgress, reviews } from "../../schema";
import { getAudioUrl, getCardById } from "../../services/flashcardService";
import { assertNotNull } from "../../utils";
import { formatDistanceToNow } from "date-fns";

// Extract the ID from the URL
const reviewId = Astro.params.id;
assertNotNull(reviewId);

const [review] = await db
  .select()
  .from(reviews)
  .where(eq(reviews.id, reviewId));
assertNotNull(review);
const { cardId } = review;

// Fetch the card information
const card = await getCardById(cardId);
assertNotNull(card);

const audioUrl = getAudioUrl(card.id, review.voiceId);

const formatDate = (date: Date) => {
  return `${formatDistanceToNow(date)} ago`;
};

// Fetch the past reviews for the card
const pastReviews = await db
  .select()
  .from(reviews)
  .where(
    and(
      eq(reviews.cardId, cardId),
      eq(reviews.userId, Astro.locals.userId),
      isNotNull(reviews.submittedAt),
    ),
  )
  .orderBy(desc(reviews.createdAt))
  .limit(5); // You can adjust the limit as per your requirement

// Fetch the progress (difficulty) for the card
const [cardProgress] = await db
  .select()
  .from(cardsProgress)
  .where(
    and(
      eq(cardsProgress.cardId, cardId),
      eq(cardsProgress.userId, Astro.locals.userId),
    ),
  );

const progress = cardProgress ? 1 - cardProgress.difficulty : 1;

const [seenCountRow] = await db
  .select({ count: sql<number>`count(*)::int` })
  .from(reviews)
  .where(
    and(
      eq(reviews.userId, Astro.locals.userId),
      eq(reviews.cardId, cardId),
      isNotNull(reviews.submittedAt),
    ),
  );

const previouslySeenCount = seenCountRow ? seenCountRow.count : 0;

// Fetch the count of correct answers for the card
const [correctAnswersCountRow] = await db
  .select({ count: sql<number>`count(*)::int` })
  .from(reviews)
  .where(
    and(
      eq(reviews.userId, Astro.locals.userId),
      eq(reviews.cardId, cardId),
      isNotNull(reviews.submittedAt),
      eq(reviews.value, 1), // 1 for Correct
    ),
  );

const correctAnswersCount = correctAnswersCountRow
  ? correctAnswersCountRow.count
  : 0;
---

<MainLayout title="Respond">
  <article class="max-w-lg mx-auto mt-10 p-4 flex flex-col items-center">
    <h1 class="text-3xl font-bold mb-4">{card.spanish}</h1>
    <h2 class="mb-4">{card.english}</h2>
    <audio controls src={audioUrl} class="mb-4 w-full"></audio>

    <form method="POST" action={`/result/${review.id}`} class="w-full">
      <label class="block text-xl mb-2 font-bold text-center">Correct?</label>
      <fieldset class="w-full">
        <button
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded mb-2 w-full"
          type="submit"
          name="response"
          value="yes">Yes</button
        >
        <button
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded w-full"
          type="submit"
          name="response"
          value="no">No</button
        >
      </fieldset>
    </form>
    <!-- Display progress and count of correct answers -->
    <div class="mt-4 mb-2 text-center w-full">
      {
        previouslySeenCount > 0 && (
          <>
            <p class="text-xl">Progress: {(progress * 100).toFixed(0)}%</p>
            <p class="text-md">
              Answered correctly {correctAnswersCount} out of{" "}
              {previouslySeenCount} times.
            </p>
          </>
        )
      }
    </div>
    {
      pastReviews.length ? (
        <>
          <h3 class="text-l font-bold my-4">Past Responses</h3>
          <ul class="mb-4 w-full">
            {pastReviews.map((review) => (
              <li class="mb-2">
                {formatDate(new Date(review.submittedAt!))} -
                {review.value ? "Correct" : "Incorrect"}
              </li>
            ))}
          </ul>
        </>
      ) : null
    }
    <div
      class="absolute mb-4 bottom-0 left-1/2 transform -translate-x-1/2 text-s"
    >
      {card.index + 1}
    </div>
  </article>
</MainLayout>
